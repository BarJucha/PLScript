# Generated from .//PLSRulesV2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,345,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,119,8,4,10,4,12,4,
        122,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,33,1,33,5,33,250,8,33,10,33,12,33,253,
        9,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,38,
        4,38,280,8,38,11,38,12,38,281,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,46,3,46,324,8,46,1,46,4,46,327,8,
        46,11,46,12,46,328,1,46,1,46,4,46,333,8,46,11,46,12,46,334,3,46,
        337,8,46,1,47,1,47,5,47,341,8,47,10,47,12,47,344,9,47,1,251,0,48,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,1,0,5,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,48,57,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,352,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,99,1,0,0,0,5,101,1,0,0,
        0,7,103,1,0,0,0,9,105,1,0,0,0,11,125,1,0,0,0,13,133,1,0,0,0,15,135,
        1,0,0,0,17,137,1,0,0,0,19,139,1,0,0,0,21,141,1,0,0,0,23,143,1,0,
        0,0,25,145,1,0,0,0,27,151,1,0,0,0,29,157,1,0,0,0,31,160,1,0,0,0,
        33,162,1,0,0,0,35,164,1,0,0,0,37,167,1,0,0,0,39,170,1,0,0,0,41,174,
        1,0,0,0,43,176,1,0,0,0,45,180,1,0,0,0,47,185,1,0,0,0,49,191,1,0,
        0,0,51,197,1,0,0,0,53,207,1,0,0,0,55,215,1,0,0,0,57,221,1,0,0,0,
        59,228,1,0,0,0,61,234,1,0,0,0,63,237,1,0,0,0,65,245,1,0,0,0,67,247,
        1,0,0,0,69,256,1,0,0,0,71,263,1,0,0,0,73,269,1,0,0,0,75,276,1,0,
        0,0,77,279,1,0,0,0,79,285,1,0,0,0,81,292,1,0,0,0,83,298,1,0,0,0,
        85,303,1,0,0,0,87,305,1,0,0,0,89,308,1,0,0,0,91,315,1,0,0,0,93,323,
        1,0,0,0,95,338,1,0,0,0,97,98,5,43,0,0,98,2,1,0,0,0,99,100,5,45,0,
        0,100,4,1,0,0,0,101,102,5,42,0,0,102,6,1,0,0,0,103,104,5,47,0,0,
        104,8,1,0,0,0,105,106,5,83,0,0,106,107,5,87,0,0,107,108,5,79,0,0,
        108,109,5,74,0,0,109,110,5,65,0,0,110,111,5,95,0,0,111,112,5,68,
        0,0,112,113,5,82,0,0,113,114,5,79,0,0,114,115,5,71,0,0,115,116,5,
        65,0,0,116,120,1,0,0,0,117,119,8,0,0,0,118,117,1,0,0,0,119,122,1,
        0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,120,1,
        0,0,0,123,124,6,4,0,0,124,10,1,0,0,0,125,126,5,70,0,0,126,127,5,
        85,0,0,127,128,5,78,0,0,128,129,5,75,0,0,129,130,5,67,0,0,130,131,
        5,74,0,0,131,132,5,65,0,0,132,12,1,0,0,0,133,134,5,40,0,0,134,14,
        1,0,0,0,135,136,5,41,0,0,136,16,1,0,0,0,137,138,5,123,0,0,138,18,
        1,0,0,0,139,140,5,125,0,0,140,20,1,0,0,0,141,142,5,91,0,0,142,22,
        1,0,0,0,143,144,5,93,0,0,144,24,1,0,0,0,145,146,5,82,0,0,146,147,
        5,79,0,0,147,148,5,87,0,0,148,149,5,78,0,0,149,150,5,69,0,0,150,
        26,1,0,0,0,151,152,5,82,0,0,152,153,5,79,0,0,153,154,5,90,0,0,154,
        155,5,78,0,0,155,156,5,69,0,0,156,28,1,0,0,0,157,158,5,84,0,0,158,
        159,5,79,0,0,159,30,1,0,0,0,160,161,5,62,0,0,161,32,1,0,0,0,162,
        163,5,60,0,0,163,34,1,0,0,0,164,165,5,60,0,0,165,166,5,61,0,0,166,
        36,1,0,0,0,167,168,5,62,0,0,168,169,5,61,0,0,169,38,1,0,0,0,170,
        171,5,76,0,0,171,172,5,85,0,0,172,173,5,66,0,0,173,40,1,0,0,0,174,
        175,5,73,0,0,175,42,1,0,0,0,176,177,5,78,0,0,177,178,5,73,0,0,178,
        179,5,69,0,0,179,44,1,0,0,0,180,181,5,80,0,0,181,182,5,79,0,0,182,
        183,5,75,0,0,183,184,5,73,0,0,184,46,1,0,0,0,185,186,5,80,0,0,186,
        187,5,69,0,0,187,188,5,84,0,0,188,189,5,76,0,0,189,190,5,65,0,0,
        190,48,1,0,0,0,191,192,5,74,0,0,192,193,5,69,0,0,193,194,5,83,0,
        0,194,195,5,76,0,0,195,196,5,73,0,0,196,50,1,0,0,0,197,198,5,76,
        0,0,198,199,5,85,0,0,199,200,5,66,0,0,200,201,5,95,0,0,201,202,5,
        74,0,0,202,203,5,69,0,0,203,204,5,83,0,0,204,205,5,76,0,0,205,206,
        5,73,0,0,206,52,1,0,0,0,207,208,5,73,0,0,208,209,5,78,0,0,209,210,
        5,65,0,0,210,211,5,67,0,0,211,212,5,90,0,0,212,213,5,69,0,0,213,
        214,5,74,0,0,214,54,1,0,0,0,215,216,5,90,0,0,216,217,5,87,0,0,217,
        218,5,82,0,0,218,219,5,79,0,0,219,220,5,67,0,0,220,56,1,0,0,0,221,
        222,5,80,0,0,222,223,5,82,0,0,223,224,5,65,0,0,224,225,5,87,0,0,
        225,226,5,68,0,0,226,227,5,65,0,0,227,58,1,0,0,0,228,229,5,70,0,
        0,229,230,5,65,0,0,230,231,5,76,0,0,231,232,5,83,0,0,232,233,5,90,
        0,0,233,60,1,0,0,0,234,235,5,79,0,0,235,236,5,68,0,0,236,62,1,0,
        0,0,237,238,5,90,0,0,238,239,5,65,0,0,239,240,5,66,0,0,240,241,5,
        73,0,0,241,242,5,69,0,0,242,243,5,82,0,0,243,244,5,90,0,0,244,64,
        1,0,0,0,245,246,5,58,0,0,246,66,1,0,0,0,247,251,5,34,0,0,248,250,
        9,0,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,252,1,0,0,0,251,249,
        1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,34,0,0,255,68,
        1,0,0,0,256,257,5,83,0,0,257,258,5,75,0,0,258,259,5,79,0,0,259,260,
        5,78,0,0,260,261,5,67,0,0,261,262,5,90,0,0,262,70,1,0,0,0,263,264,
        5,68,0,0,264,265,5,65,0,0,265,266,5,76,0,0,266,267,5,69,0,0,267,
        268,5,74,0,0,268,72,1,0,0,0,269,270,5,80,0,0,270,271,5,76,0,0,271,
        272,5,85,0,0,272,273,5,83,0,0,273,274,5,73,0,0,274,275,5,75,0,0,
        275,74,1,0,0,0,276,277,5,59,0,0,277,76,1,0,0,0,278,280,7,1,0,0,279,
        278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        283,1,0,0,0,283,284,6,38,0,0,284,78,1,0,0,0,285,286,5,76,0,0,286,
        287,5,73,0,0,287,288,5,67,0,0,288,289,5,90,0,0,289,290,5,66,0,0,
        290,291,5,65,0,0,291,80,1,0,0,0,292,293,5,84,0,0,293,294,5,69,0,
        0,294,295,5,75,0,0,295,296,5,83,0,0,296,297,5,84,0,0,297,82,1,0,
        0,0,298,299,5,66,0,0,299,300,5,79,0,0,300,301,5,79,0,0,301,302,5,
        76,0,0,302,84,1,0,0,0,303,304,5,44,0,0,304,86,1,0,0,0,305,306,5,
        68,0,0,306,307,5,79,0,0,307,88,1,0,0,0,308,309,5,87,0,0,309,310,
        5,89,0,0,310,311,5,80,0,0,311,312,5,73,0,0,312,313,5,83,0,0,313,
        314,5,90,0,0,314,90,1,0,0,0,315,316,5,75,0,0,316,317,5,79,0,0,317,
        318,5,78,0,0,318,319,5,73,0,0,319,320,5,69,0,0,320,321,5,67,0,0,
        321,92,1,0,0,0,322,324,5,45,0,0,323,322,1,0,0,0,323,324,1,0,0,0,
        324,326,1,0,0,0,325,327,7,2,0,0,326,325,1,0,0,0,327,328,1,0,0,0,
        328,326,1,0,0,0,328,329,1,0,0,0,329,336,1,0,0,0,330,332,5,46,0,0,
        331,333,7,2,0,0,332,331,1,0,0,0,333,334,1,0,0,0,334,332,1,0,0,0,
        334,335,1,0,0,0,335,337,1,0,0,0,336,330,1,0,0,0,336,337,1,0,0,0,
        337,94,1,0,0,0,338,342,7,3,0,0,339,341,7,4,0,0,340,339,1,0,0,0,341,
        344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,96,1,0,0,0,344,342,
        1,0,0,0,9,0,120,251,281,323,328,334,336,342,1,6,0,0
    ]

class PLSRulesV2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PLUS = 1
    MINUS = 2
    MNOZENIE = 3
    DZIELENIE = 4
    KOMENTARZ = 5
    FUNKCJA = 6
    LNAWIAS_OKRAGLY = 7
    PNAWIAS_OKRAGLY = 8
    LNAWIAS_KLAMROWY = 9
    PNAWIAS_KLAMROWY = 10
    LNAWIAS_KWADRATOWY = 11
    PNAWIAS_KWADRATOWY = 12
    ROWNE = 13
    ROZNE = 14
    PODSTAW = 15
    WIEKSZE = 16
    MNIEJSZE = 17
    MNIEJSZE_ROWNE = 18
    WIEKSZE_ROWNE = 19
    ALTERNATYWA = 20
    KONIUNKCJA = 21
    NEGACJA = 22
    WHILE = 23
    FOR = 24
    IF = 25
    ELIF = 26
    ELSE = 27
    RETURN = 28
    PRAWDA = 29
    FALSZ = 30
    OD = 31
    IMPORT = 32
    DWUKROPEK = 33
    NAPIS = 34
    PRZERWIJ = 35
    KONTYNUUJ = 36
    ZWIEKSZ = 37
    KONIEC_LINII = 38
    SPACJA = 39
    INT = 40
    STRING = 41
    BOOL = 42
    PRZECINEK = 43
    DO = 44
    PRINT = 45
    KONIEC = 46
    NUMERYCZNY = 47
    ID = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'FUNKCJA'", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "'ROWNE'", "'ROZNE'", "'TO'", "'>'", "'<'", 
            "'<='", "'>='", "'LUB'", "'I'", "'NIE'", "'POKI'", "'PETLA'", 
            "'JESLI'", "'LUB_JESLI'", "'INACZEJ'", "'ZWROC'", "'PRAWDA'", 
            "'FALSZ'", "'OD'", "'ZABIERZ'", "':'", "'SKONCZ'", "'DALEJ'", 
            "'PLUSIK'", "';'", "'LICZBA'", "'TEKST'", "'BOOL'", "','", "'DO'", 
            "'WYPISZ'", "'KONIEC'" ]

    symbolicNames = [ "<INVALID>",
            "PLUS", "MINUS", "MNOZENIE", "DZIELENIE", "KOMENTARZ", "FUNKCJA", 
            "LNAWIAS_OKRAGLY", "PNAWIAS_OKRAGLY", "LNAWIAS_KLAMROWY", "PNAWIAS_KLAMROWY", 
            "LNAWIAS_KWADRATOWY", "PNAWIAS_KWADRATOWY", "ROWNE", "ROZNE", 
            "PODSTAW", "WIEKSZE", "MNIEJSZE", "MNIEJSZE_ROWNE", "WIEKSZE_ROWNE", 
            "ALTERNATYWA", "KONIUNKCJA", "NEGACJA", "WHILE", "FOR", "IF", 
            "ELIF", "ELSE", "RETURN", "PRAWDA", "FALSZ", "OD", "IMPORT", 
            "DWUKROPEK", "NAPIS", "PRZERWIJ", "KONTYNUUJ", "ZWIEKSZ", "KONIEC_LINII", 
            "SPACJA", "INT", "STRING", "BOOL", "PRZECINEK", "DO", "PRINT", 
            "KONIEC", "NUMERYCZNY", "ID" ]

    ruleNames = [ "PLUS", "MINUS", "MNOZENIE", "DZIELENIE", "KOMENTARZ", 
                  "FUNKCJA", "LNAWIAS_OKRAGLY", "PNAWIAS_OKRAGLY", "LNAWIAS_KLAMROWY", 
                  "PNAWIAS_KLAMROWY", "LNAWIAS_KWADRATOWY", "PNAWIAS_KWADRATOWY", 
                  "ROWNE", "ROZNE", "PODSTAW", "WIEKSZE", "MNIEJSZE", "MNIEJSZE_ROWNE", 
                  "WIEKSZE_ROWNE", "ALTERNATYWA", "KONIUNKCJA", "NEGACJA", 
                  "WHILE", "FOR", "IF", "ELIF", "ELSE", "RETURN", "PRAWDA", 
                  "FALSZ", "OD", "IMPORT", "DWUKROPEK", "NAPIS", "PRZERWIJ", 
                  "KONTYNUUJ", "ZWIEKSZ", "KONIEC_LINII", "SPACJA", "INT", 
                  "STRING", "BOOL", "PRZECINEK", "DO", "PRINT", "KONIEC", 
                  "NUMERYCZNY", "ID" ]

    grammarFileName = "PLSRulesV2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


